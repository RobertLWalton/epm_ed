// Scalar Calculator Solution to the
// Two Dimensional Geometry Problem
//
// File:	cc-scalar-vec-2d.txt
// Authors:	Bob Walton (walton@acm.org)
// Date:	Sun Jun 20 03:06:55 EDT 2021
//
// The authors have placed this program in the public
// domain; they make no warranty and accept no liability
// for this program.

// C++ Data Structures
//

#include <iostream>
#include <algorithm>
#include <cstring>
#include <cctype>
#include <cmath>    // PI is M_PI

using std::cin;
using std::cout;
using std::cerr;
using std::endl;
using std::ostream;
using std::swap;
using std::max;
using std::min;

struct vec { double x, y; };
struct linear { vec lx, ly; };
struct element { vec v; element * next; };
    // For vector lists.
enum type { NONE = 0, BOOLEAN, SCALAR, VECTOR,
            LINEAR, LIST };
struct var {
    type t;
    bool b;
    double s; // scalar
    vec v;
    linear l;
    element * first;
        // First element of vector LIST.
};

var vars[128];
    // vars['X'] is value of variable named X.
    // Implicitly initialized to
    // vars[...].t == 0 == NONE,

double units[13] =  // units[d] = 10**(-d)
    { 1e-0, 1e-1, 1e-2, 1e-3, 1e-4, 1e-5, 1e-6,
      1e-7, 1e-8, 1e-9, 1e-10, 1e-11, 1e-12 };

vec zerov = { 0, 0 };  // Zero vector
vec uxv = { 1, 0 };    // Unit vector in X direction.
vec uyv = { 0, 1 };    // Unit vector in Y direction.

const int MAX_LINE = 100000;

int line_number = 0;
char line[MAX_LINE+2];
    // Input line.
char squashed[MAX_LINE+2];
    // Input line with whitespace removed.

// Define assert to print error and current line.
//
# define assert(x) \
    if ( ! ( x ) ) \
    { \
	cerr << "FATAL ERROR: assert ( " \
	     << #x << " ) failed in line " \
	     << line_number << ":" << endl \
	     << line << endl; \
	exit ( 1 ); \
    }


// C++ Main Program
// --- ---- -------

// Read and return scalar.
//
double read_scalar ( char * & p )
{
    char * endp;
    double r = strtod ( p, & endp );
    assert ( endp > p );
    p = endp;
    return r;
}

// Read and return vector.
//
vec read_vector ( char * & p )
{
    vec r;
    assert ( * p ++ == '(' );
    r.x = read_scalar ( p );
    assert ( * p ++ == ',' );
    r.y = read_scalar ( p );
    assert ( * p ++ == ')' );
    return r;
}

// Print vector.
//
ostream & operator << ( ostream & s, vec v )
{
    return s << "(" << v.x << "," << v.y << ")";
}

// Match a pattern to the squashed input line.  Returns
// true iff successful.  Sets V[.] to variables matched
// to $ in left-to-right order:
// //
var * V[6];
# define RES (*V[0])    // Result
# define OP1 (*V[1])    // First Operand
# define OP2 (*V[2])    // Second Operand
# define OP3 (*V[3])    // Third Operand
# define OP4 (*V[4])    // Fourth Operand
# define OP5 (*V[5])    // Fifth Operand
bool match ( const char * pattern )
{
    const char * p = squashed, * q = pattern;
    int i = 0;
    while ( * p != 0 )
    {
        if ( * q == '$' )
	{
	    if ( ! isalpha ( * p ) ) return false;
	    assert ( i < 6 );
	    V[i++] = & vars[*p++];
	    q ++;
	}
	else if ( * q ++ != * p ++ ) return false;
    }
    if ( * q != 0 ) return false;
    else return true;
}

bool compute_result ( void );  // See below.
int main ( int argc, char * argv[] )
{
    while ( cin.getline ( line, sizeof ( line ) ),
            cin.good() )
    {
	++ line_number;
        assert ( strlen ( line ) <= MAX_LINE );
	    // Line is too long.

	// Set squashed to line with whitespace
	// characters deleted.
	//
	char * p = squashed, * q = line;
	bool has_digit;
	while ( true )
	{ 
	    * p = * q ++;
	    if ( * p  == 0 ) break;
	    if ( ! isspace ( * p ) ) ++ p;
	}

	if ( squashed[0] == '#' )
	{
	    cout << line << endl;
	    continue;
	}

	p = squashed;
	has_digit = false;
	while ( * p && ! has_digit )
	    has_digit = isdigit ( * p ++ );

	if ( has_digit )
	{
	    p = squashed;

	    assert ( isalpha ( p[0] ) );
		// First line character is not variable.
	    assert ( p[1] == '=' );
		// Second line character is not '='.
	
	    V[0] = & vars[p[0]];
	    p += 2;

	    if ( p[0] == '[' )
	    {
		RES.t = LINEAR;
		++ p;
		RES.l.lx = read_vector ( p );
		assert ( * p ++ == ',' );
		RES.l.ly = read_vector ( p );
		assert ( * p ++ == ']' );
		assert ( * p == 0 );
		cout << line << endl;
		continue;
	    }

	    else if ( p[0] == '(' && p[1] == '(' )
	    {
		RES.t = LIST;
		element * last = NULL;
		++ p;
		while ( true )
		{
		    element & e = * new element;
		    e.next = NULL;
		    if ( last == NULL )
			RES.first = & e;
		    else
			last->next = & e;
		    last = & e;
		    e.v = read_vector ( p );
		    if ( * p == ')' )
		    {
			++ p;
			assert ( * p == 0 );
			break;
		    }
		    assert ( * p ++ == ',' );
		}
		cout << line << endl;
		continue;
	    }

	    else if ( p[0] == '(' )
	    {
		RES.t = VECTOR;
		RES.v = read_vector ( p );
		assert ( * p == 0 );
		cout << line << endl;
		continue;
	    }

	    else
	    {
		RES.t = SCALAR;
		RES.s = read_scalar ( p );
		assert ( * p == 0 );
		cout << line << endl;
		continue;
	    }
	}

	// Has_digit is false from here on, and we
	// use exclusively the `match' function to do
	// the rest of the parsing.

	if ( match ( "$=true" ) )
	{
	    RES.t = BOOLEAN;
	    RES.b = true;
	    cout << line << endl;
	    continue;
	}
	if ( match ( "$=false" ) )
	{
	    RES.t = BOOLEAN;
	    RES.b = false;
	    cout << line << endl;
	    continue;
	}
	if ( match ( "$=()" ) )
	{
	    RES.t = LIST;
	    RES.first = NULL;
	    cout << line << endl;
	    continue;
	}

	// Compute_result() does the rest of the calls
	// to match an result computation.  Returns true
	// on success and false if operation not
	// recognized.
	//
	if ( compute_result() )
	{
	    cout << line << " = ";
	    switch ( RES.t )
	    {
	    case BOOLEAN:
		cout << ( RES.b ? "true" : "false" );
		break;
	    case SCALAR:
		cout << RES.s; break;
	    case VECTOR:
		cout << RES.v; break;
	    case LINEAR:
		cout << "[" << RES.l.lx << ","
			    << RES.l.ly << "]";
		break;
	    case LIST:
		cout << "(";
		{
		    element * ep = RES.first;
		    while ( ep != NULL )
		    {
			if ( ep != RES.first )
			    cout << ",";
			cout << ep->v;
			ep = ep->next;
		    }
		}
		cout << ")";
		break;
	    default:
		cout << "(BAD RESULT TYPE "
		     << RES.t << ")";
	    }
	    cout << endl;
	}
        else
	{
	    cerr << "ERROR: unrecognized operation in:"
	         << endl << "    " << line << endl;
	    exit ( 1 );
	}
    }

    return 0;
}

// Scalar Calculator Functions
// ------ ---------- ---------

bool lt ( double x, double y, double d )
{
    assert ( 0 <= d && d <= 12 );
    int i = int ( d );
    assert ( i == d );
    return x < y - 0.5 * units[i];
}

bool le ( double x, double y, double d )
{
    assert ( 0 <= d && d <= 12 );
    int i = int ( d );
    assert ( i == d );
    return x < y + 0.5 * units[i];
}

bool eq ( double x, double y, double d )
{
    assert ( 0 <= d && d <= 12 );
    int i = int ( d );
    assert ( i == d );
    return fabs ( x - y ) < 0.5 * units[i];
}

// C++ Compute Result Function
// --- ------- ------ --------

bool compute_result ( void )
{
    if ( match ( "$=$" ) )
    {
	RES = OP1;
	return true;
    }
    if ( match ( "$=$+$" ) )
    {
	assert ( OP1.t == OP2.t );
	if ( OP1.t == SCALAR )
	{
	    RES.t = SCALAR;
	    RES.s = OP1.s + OP2.s;
	}
	else
	    return false;
	return true;
    }
    if ( match ( "$=$-$" ) )
    {
	assert ( OP1.t == OP2.t );
	if ( OP1.t == SCALAR )
	{
	    RES.t = SCALAR;
	    RES.s = OP1.s - OP2.s;
	}
	else
	    return false;
	return true;
    }
    if ( match ( "$=$*$" ) )
    {
	if ( OP1.t == SCALAR 
	     &&
	     OP2.t == SCALAR )
	{
	    RES.t = SCALAR;
	    RES.s = OP1.s * OP2.s;
	}
	else
	    return false;
	return true;
    }
    if ( match ( "$=$/$" ) )
    {
	assert ( OP1.t == SCALAR );
	assert ( OP2.t == SCALAR );
	RES.t = SCALAR;
	RES.s = OP1.s / OP2.s;
	return true;
    }
    if ( match ( "$=$%$" ) )
    {
	assert ( OP1.t == SCALAR );
	assert ( OP2.t == SCALAR );
	RES.t = SCALAR;
	RES.s = fmod ( OP1.s, OP2.s );
	return true;
    }
    if ( match ( "$=-$" ) )
    {
	if ( OP1.t == SCALAR )
	{
	    RES.t = SCALAR;
	    RES.s = - OP1.s;
	}
	else
	    return false;
	return true;
    }
    if ( match ( "$=|$|" ) )
    {
	assert ( OP1.t == SCALAR );
	RES.t = SCALAR;
	RES.s = fabs ( OP1.s );
	return true;
    }
    if ( match ( "$=sin$" ) )
    {
	assert ( OP1.t == SCALAR );
	RES.t = SCALAR;
	RES.s = sin ( ( M_PI / 180 ) * OP1.s );
	return true;
    }
    if ( match ( "$=cos$" ) )
    {
	assert ( OP1.t == SCALAR );
	RES.t = SCALAR;
	RES.s = cos ( ( M_PI / 180 ) * OP1.s );
	return true;
    }
    if ( match ( "$=tan$" ) )
    {
	assert ( OP1.t == SCALAR );
	RES.t = SCALAR;
	RES.s = tan ( ( M_PI / 180 ) * OP1.s );
	return true;
    }
    if ( match ( "$=$<$:$" ) )
    {
	assert ( OP3.t == SCALAR );
	if ( OP1.t == SCALAR )
	{
	    assert ( OP2.t == SCALAR );
	    RES.t = BOOLEAN;
	    RES.b = lt ( OP1.s, OP2.s, OP3.s );
	}
	else
	    return false;
	return true;
    }
    if ( match ( "$=$<=$:$" ) )
    {
	assert ( OP3.t == SCALAR );
	if ( OP1.t == SCALAR )
	{
	    assert ( OP2.t == SCALAR );
	    RES.t = BOOLEAN;
	    RES.b = le ( OP1.s, OP2.s, OP3.s );
	}
	else
	    return false;
	return true;
    }
    if ( match ( "$=$==$:$" ) )
    {
	assert ( OP3.t == SCALAR );
	if ( OP1.t == SCALAR )
	{
	    assert ( OP2.t == SCALAR );
	    RES.t = BOOLEAN;
	    RES.b = eq ( OP1.s, OP2.s, OP3.s );
	}
	else
	    return false;
	return true;
    }

    return false;
}

